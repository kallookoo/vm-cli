#!/usr/bin/env bash

VM_CLI_VERSION="1.0.0"

VM_CLI_VM_NAME=""
VM_CLI_CURRENT_MESSAGE=""

if ! [[ -n "$VM_CLI_CMD_TIMEOUT" && "$VM_CLI_CMD_TIMEOUT" =~ ^[0-9]+$ ]]; then
  VM_CLI_CMD_TIMEOUT=30
fi
if [[ "$VM_CLI_CMD_TIMEOUT" -lt 0 ]]; then
  VM_CLI_CMD_TIMEOUT=0
fi

__vm_cli_help() {
  cat <<EOF
Version: $VM_CLI_VERSION

Usage: vm-cli [GLOBAL COMMAND] [OPTIONS]
       vm-cli [--vm NAME|UUID] [VIRTUAL MACHINNE COMMAND] [OPTIONS]

OPTIONS:
  --vm                Specify the Virtual Machine Name or UUID.
                      Required unless VM_CLI_VM_DEFAULT is set in environment.
                      You can also use --name, --uuid, or --id.

GLOBAL COMMANDS:
  list                List all Virtual Machines.
    --running         Show only running.
  help                Show this help message.
  version             Show version information.
  update              Updates wm-cli to the latest version.
    --token           Specify the GitHub token for authentication.
                      Required if you have exceeded the GitHub API rate limit.

VIRTUAL MACHINE COMMANDS:
  See the VBoxManage documentation for more details.
  https://www.virtualbox.org/manual/ch08.html

  start               Start the Virtual Machine.
    --type            Set the type of the Virtual Machine (headless by default).
    --putenv, -E      Set environment variables for the Virtual Machine.
    --password        Set the password file for the Virtual Machine.
    --password-id     Set the password ID for the Virtual Machine.
  stop                Stop the Virtual Machine (saves state by default).
    --save            Save the Virtual Machine state.
    --acpi            Send ACPI power button signal.
    --sleep           Send ACPI sleep signal.
                      Only work if the guest OS supports it.
    --poweroff        Power off the Virtual Machine immediately.
  save                Alias for 'stop --save'.
  poweroff            Alias for 'stop --poweroff'.
  shutdown            Asks the guest OS to shutdown.
    --force           Force shutdown.
  reboot              Reboot the virtual machine.
  pause               Pause the Virtual Machine.
  resume              Resume the Virtual Machine.
  control             Pass the defined subcommand directly to VBoxManage controlvm.
  ssh                 SSH into the Virtual Machine. Requires Host-Only.
                      This command will autostart the Virtual Machine.
                      Use -- to pass arguments to ssh to separate the args.
  status              Show Virtual Machine running status.
  ip                  Show the Host-Only IP address of the Virtual Machine.
                      This command will autostart the Virtual Machine.

ENVIRONMENT:
  VM_CLI_VM_DEFAULT   Default Virtual Machine.
  VM_CLI_CMD_TIMEOUT  Max. time the command will attempt to execute, in seconds.
                      Default: 30 seconds.

EOF
  exit 0
}

__vm_cli_message() {
  [ -t 1 ] || return 0
  local message status
  local color_WAIT="\e[1;35m"
  local color_INFO="\e[1;36m"
  local color_DONE="\e[1;32m"
  local color_WARNING="\e[1;33m"
  local color_FAILED="\e[1;31m"
  local color_RESET="\e[0m"
  local color_VM="\e[1;34m"
  case "$1" in
  --info) status="${color_INFO}[INFO]${color_RESET}" ;;
  --done) status="${color_DONE}[DONE]${color_RESET}" ;;
  --failed) status="${color_FAILED}[FAILED]${color_RESET}" ;;
  --warning) status="${color_WARNING}[WARNING]${color_RESET}" ;;
  *)
    VM_CLI_CURRENT_MESSAGE="$1"
    sleep 0.4
    ;;
  esac
  if [[ -n "$2" ]]; then
    VM_CLI_CURRENT_MESSAGE="$2"
  fi
  message="$(echo "$VM_CLI_CURRENT_MESSAGE" | xargs)"
  if [[ -n "$VM_CLI_VM_NAME" ]]; then
    message="[ ${color_VM}${VM_CLI_VM_NAME}${color_RESET} ] $message"
  fi
  if [[ -z "$status" ]]; then
    printf "\r$(tput el)%b %b" "${color_WAIT}[WAIT]${color_RESET}" "$message"
    return 0
  fi
  printf "\r$(tput el)%b %b" "$status" "$message\n"
  return 0
}

__vm_cli_list() {
  local type="vms"
  if [[ -n "$1" && "$1" == "--running" ]]; then
    type="runningvms"
  fi
  VBoxManage list "$type" | awk '
BEGIN { nlen = 28 }
{
    name = $1;
    uuid = $2;
    gsub(/"/, "", name);
    if (length(name) > nlen) nlen = length(name);
    names[NR] = name;
    uuids[NR] = uuid;
}
END {
    nlen += 2;
    printf "%-*s %s\n", nlen, "NAME", "UUID";
    for (i=1; i<=NR; i++) {
        printf "%-*s %s\n", nlen,  names[i], uuids[i];
    }
}
'
  exit 0
}

__vm_cli_is_running() {
  VBoxManage list runningvms | grep -q "$VM_CLI_VM_NAME"
}

__vm_cli_status() {
  if __vm_cli_is_running; then
    __vm_cli_message --info "Running."
    return 0
  fi
  __vm_cli_message --info "Stopped."
  return 1
}

__vm_cli_control() {
  local message
  case "$1" in
  pause | reset | poweroff | savestate | acpipowerbutton | acpisleepbutton | \
    shutdown | reboot)
    if ! __vm_cli_is_running; then
      __vm_cli_message --info "The virtual machine is not running"
      return 1
    fi
    ;;
  resume)
    if __vm_cli_is_running; then
      __vm_cli_message --info "Already running."
      return 0
    fi
    ;;
  *)
    # Pass the another subcommand directly to VBoxManage.
    __vm_cli_message --info "Executing the controlvm subcommand: $1"
    VBoxManage controlvm "$VM_CLI_VM_NAME" "$@"
    return $?
    ;;
  esac
  case "$1" in
  pause) message="Pausing the virtual machine..." ;;
  reset) message="Resetting the virtual machine..." ;;
  poweroff) message="Powering off the virtual machine..." ;;
  savestate) message="Saving the virtual machine state..." ;;
  acpipowerbutton) message="Sending ACPI power button signal..." ;;
  acpisleepbutton) message="Sending ACPI sleep button signal..." ;;
  shutdown) message="Shutting down the virtual machine..." ;;
  resume) message="Resuming the virtual machine..." ;;
  reboot) message="Rebooting the virtual machine..." ;;
  esac
  __vm_cli_message "$message"
  if VBoxManage controlvm "$VM_CLI_VM_NAME" "$@" >/dev/null 2>&1; then
    __vm_cli_message --done
    return 0
  fi
  __vm_cli_message --failed
  return 1
}

__vm_cli_start() {
  if __vm_cli_is_running; then
    __vm_cli_message --info "Already running."
    return 0
  fi
  local start_args=()
  while [[ $# -gt 0 ]]; do
    case "$1" in
    --type | --putenv | -E | --password | --password-id)
      if [[ -n "$2" ]] && ! [[ "$2" =~ ^- ]]; then
        start_args+=("$1" "$2")
        shift
      fi
      ;;
    --type=* | --putenv=* | -E=* | --password=* | --password-id=*)
      start_args+=("$1")
      ;;
    esac
    shift
  done
  if [[ " ${start_args[*]} " != *"--type"* ]]; then
    start_args+=("--type" "headless")
  fi
  __vm_cli_message "Initiating the virtual machine."
  if VBoxManage startvm "$VM_CLI_VM_NAME" "${start_args[@]}" >/dev/null 2>&1; then
    __vm_cli_message --done
    return 0
  fi
  __vm_cli_message --failed
  return 1
}

__vm_cli_get_ip() {
  if ! __vm_cli_start "$@"; then
    return 1
  fi
  local tries=1
  local index ip start_time end_time current_time
  __vm_cli_message "Retrieving IP address"
  start_time=$(date +%s)
  end_time=$((start_time + VM_CLI_CMD_TIMEOUT))
  index="$(VBoxManage showvminfo "$VM_CLI_VM_NAME" --machinereadable | awk -F= ' $2 ~ /hostonly/ {sub(/[^0-9]+/, "", $1); print $1-1; exit}')"
  while [[ -n "$index" ]]; do
    current_time=$(date +%s)
    if [[ $current_time -ge $end_time ]]; then
      break
    fi
    ip="$(VBoxManage guestproperty enumerate "$VM_CLI_VM_NAME" "*Net/$index/*" | awk -F"'" '$2 ~ /Up/ {found=1}; found && $1 ~ /IP/ {print $2; exit}')"
    if [[ -n "$ip" ]]; then
      __vm_cli_message --done "IP address obtained: $ip"
      [ -t 1 ] || echo "DONE $ip" >&2
      return 0
    fi
    __vm_cli_message "Retrieving IP address... ${tries}s - ETA: $((VM_CLI_CMD_TIMEOUT - tries))s"
    sleep 0.6
    ((tries++))
  done
  __vm_cli_message --failed "Retrieving IP address"
  return 1
}

__vm_cli_wait_ssh() {
  local host="$1"
  local tries=1
  local start_time end_time current_time
  start_time=$(date +%s)
  end_time=$((start_time + VM_CLI_CMD_TIMEOUT))
  while true; do
    current_time=$(date +%s)
    if [[ $current_time -ge $end_time ]]; then
      return 1
    fi
    if ssh -q -o BatchMode=yes -o StrictHostKeyChecking=no -o ConnectTimeout=1 "$host" 'exit 0'; then
      return 0
    fi
    __vm_cli_message "Connecting... ${tries}s - ETA: $((VM_CLI_CMD_TIMEOUT - tries))s"
    sleep 0.6
    ((tries++))
  done
}
__vm_cli_ssh() {
  if ! __vm_cli_start "$@"; then
    return 1
  fi
  local ssh_config="$HOME/.ssh/config"
  local ip host host_name
  local ssh_args=()
  ip="$(__vm_cli_get_ip "$@" 2>&1 | awk '$0 ~ /DONE/ {print $NF}')"
  if ! [[ "$ip" =~ ^192(\.[0-9]{1,3}){3}$ ]]; then
    __vm_cli_message --failed
    return 1
  fi
  host="$ip"
  if [[ -f "$ssh_config" ]] && grep -q "$ip" "$ssh_config"; then
    host_name=$(tail -r "$ssh_config" | awk -v ip="$ip" 'found && $1 == "Host" {print $2; exit}; $1 == "HostName" && $2 == ip {found=1}')
    if [ -n "$host_name" ]; then
      host="$host_name"
      __vm_cli_message --info "Detected host $host for $ip."
    fi
  fi
  __vm_cli_message "Connecting..."
  if __vm_cli_wait_ssh "$host"; then
    ssh_args=("-t" "$host")
    while [[ $# -gt 0 ]]; do
      if [[ "$1" =~ ^-(E|-(type|putenv|password(-id)?)) ]]; then
        if [[ " $1 " != *"="* ]] && [[ -n "$2" ]] && ! [[ "$2" =~ ^- ]]; then
          shift
        fi
      elif [[ "$1" == "--" ]]; then
        shift
        if [[ $# -gt 0 ]]; then
          ssh_args+=("$@")
        fi
        break
      else
        ssh_args+=("$1")
      fi
      shift
    done
    __vm_cli_message --done "Connected."
    ssh "${ssh_args[@]}"
    return $?
  fi
  __vm_cli_message --failed
  return 1
}

__vm_cli_update() {
  local exit_code=0
  local api_url="https://api.github.com/repos/kallookoo/vm-cli/releases/latest"
  local token response version cmd
  local install_path
  install_path="$(dirname "${BASH_SOURCE[0]:-0}")"
  for cmd in curl tar; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      echo "Then $cmd command is required but not installed."
      exit 1
    fi
  done
  while [[ $# -gt 0 ]]; do
    case "$1" in
    --token)
      if [[ -n "$2" ]] && ! [[ "$2" =~ ^- ]]; then
        token="$2"
        shift
      fi
      ;;
    esac
    shift
  done
  __vm_cli_message --info "Checking the latest version."
  response="$(curl -sfL "$api_url")"
  exit_code=$?
  if echo "$response" | grep -q "API rate limit exceeded"; then
    if [[ -z "$token" ]]; then
      __vm_cli_message --warning "GitHub API rate limit exceeded. Please provide a token."
      exit 1
    fi
    response="$(curl -sfL -H "Authorization: Bearer $token" "$api_url")"
    exit_code=$?
  fi
  if [[ "$exit_code" -ne 0 || -z "$response" ]]; then
    __vm_cli_message --failed "Failed to fetch the latest version."
    exit 2
  fi
  # Extracts the latest version using jq, awk, or sed.
  if command -v jq >/dev/null 2>&1; then
    version=$(jq -n "$response" | jq -r '.tag_name')
  elif command -v awk >/dev/null 2>&1; then
    version=$(echo "$response" | awk -F: '$1 ~ /tag_name/ {gsub(/[^v0-9\.]+/, "", $2) ;print $2; exit}')
  elif command -v sed >/dev/null 2>&1; then
    version=$(echo "$response" | sed -n 's/.*"tag_name": *"\([^"]*\)".*/\1/p')
  else
    __vm_cli_message --warning "sed, awk, or jq is required to perform the update."
    exit 2
  fi
  if [[ -z "$version" ]] || ! [[ "$version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "There was an error trying to check what is the latest version."
    exit 2
  fi
  version="${version#v}"
  if [[ "$VM_CLI_VERSION" == "$version" ]]; then
    __vm_cli_message --info "Already use the latest version"
    exit 0
  fi
  __vm_cli_message --info "Updating to $version version"
  curl -sfL "https://github.com/kallookoo/vm-cli/releases/download/v1.0.0/vm-cli.tar.gz" | tar -xzf - -C "$install_path" || {
    __vm_cli_message --failed
    exit 2
  }
  chmod +x "$install_path/vm-cli"
  __vm_cli_message --done "Updated to $version version"
  exit 0
}

__vm_cli() {
  case "${1:-help}" in
  help)
    __vm_cli_help
    ;;
  version)
    __vm_cli_message --info "Version: $VM_CLI_VERSION"
    exit 0
    ;;
  update)
    shift
    __vm_cli_update "$@"
    ;;
  esac
  if ! command -v VBoxManage >/dev/null 2>&1; then
    __vm_cli_message --warning "VBoxManage command not found."
    exit 1
  fi
  case "$1" in
  list)
    shift
    __vm_cli_list "$@"
    ;;
  --vm | --name | --uuid | --id)
    shift
    local vm_name
    if [[ -n "$1" ]] && ! [[ "$1" =~ ^- ]]; then
      vm_name="$1"
      shift
    fi
    if [[ -n "$vm_name" ]] && VBoxManage list vms | grep -q "$vm_name"; then
      VM_CLI_VM_NAME="$vm_name"
    fi
    ;;
  esac
  if [[ -z "$VM_CLI_VM_NAME" ]]; then
    if [[ -z "$VM_CLI_VM_DEFAULT" ]]; then
      __vm_cli_message --warning "Missing virtual machine name."
      exit 2
    fi
    __vm_cli_message --info "Using the default virtual machine: $VM_CLI_VM_DEFAULT"
    VM_CLI_VM_NAME="$VM_CLI_VM_DEFAULT"
  fi
  if ! VBoxManage list vms | grep -q "$VM_CLI_VM_NAME"; then
    __vm_cli_message --warning "The Virtual machine not found."
    exit 1
  fi
  if [[ $# -eq 0 ]]; then
    __vm_cli_help
  fi
  local exit_code=0
  case "$1" in
  control)
    shift
    __vm_cli_control "$@"
    exit_code=$?
    ;;
  pause | resume | reset | \
    poweroff | savestate | acpipowerbutton | \
    acpisleepbutton | reboot | shutdown)
    __vm_cli_control "$@"
    exit_code=$?
    ;;
  stop)
    local stop_mode="savestate"
    if [[ -n "$2" && "$2" =~ ^-- ]]; then
      case "$2" in
      --acpi)
        stop_mode="acpipowerbutton"
        ;;
      --sleep)
        stop_mode="acpisleepbutton"
        ;;
      --poweroff)
        stop_mode="poweroff"
        ;;
      esac
    fi
    __vm_cli_control "$stop_mode"
    exit_code=$?
    ;;
  save)
    __vm_cli_control "savestate"
    exit_code=$?
    ;;
  sleep)
    __vm_cli_control "acpisleepbutton"
    exit_code=$?
    ;;
  start)
    shift
    __vm_cli_start "$@"
    exit_code=$?
    ;;
  status)
    __vm_cli_status
    exit_code=$?
    ;;
  ip)
    shift
    __vm_cli_get_ip "$@"
    exit_code=$?
    ;;
  ssh)
    shift
    __vm_cli_ssh "$@"
    exit_code=$?
    ;;
  *) __vm_cli_help ;;
  esac
  exit $exit_code
}

# Main function
__vm_cli "$@"
